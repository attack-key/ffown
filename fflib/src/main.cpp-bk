#include "detail/acceptor_impl.h"
#include "detail/epoll_impl.h"
#include "thread.h"
#include "smart_ptr/shared_ptr.h"

#include <iostream>
using namespace std;

#include<pthread.h>
#include<stdio.h>

struct foo_t
{
    foo_t(){ cout <<"foo_t::foo_t...\n";}
    ~foo_t(){ cout <<"foo_t::~foo_t...\n";}
    void print() { cout <<"fuck\n";}
};
void test_construct_deconstruct()
{
    foo_t* a = new foo_t();
    shared_ptr_t<foo_t> p1(a);
    assert(p1.ref_count() == 1);
    shared_ptr_t<foo_t> p2(p1);
    assert(p2.ref_count() == 2);
    assert(p1.ref_count() == 2);
    assert(p2 == p1);
    p1.reset();
    cout <<"reset ok\n";
    assert(p2.get() == a);
    assert(p2.ref_count() == 1);
    (*p2).print();
    p2->print();
    assert(p2 == a);
     if (p2) { cout <<"oh nice!1\n"; }
    p2.reset();
    assert(p2.ref_count() == 0);
    if (p2) { cout <<"oh nice!\n"; }
}

void run_test()
{
    test_construct_deconstruct();
}
int main(int argc, char* argv[])
{
    run_test();
    if (argc != 3)
    {
        cout <<argv[0] <<" useage listen:host port\n";
        return 1;
    }
    char buff[128];
    snprintf(buff, sizeof(buff), "tcp://%s:%s", argv[1], argv[2]);

    int ret = 0;

    task_queue_pool_t tg;
    thread_t thread;
    thread.create_thread(task_queue_pool_t::gen_task(&tg), 2);

    epoll_impl_t epoll(&tg);
    acceptor_impl_t acceptor(&epoll);
    ret = acceptor.open(string(buff));
     if (ret)
    {
        cout <<"acceptor open failed:" << buff <<"\n";
        return 1;
    }
    else
    {
        cout <<"acceptor open ok, wait to listen\n";
    }

    epoll.event_loop();
    thread.join();

	return 0;
}

